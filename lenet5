import torch
import torch.nn as nn
import torch.nn.functional as F
import matplotlib.pyplot as plt
class LeNet5(nn.Module):
    def __init__(self):
        super(LeNet5, self).__init__()
        self.conv1 = nn.Conv2d(1, 6, 5, 2) 
        self.conv2 = nn.Conv2d(6, 16, 5)  
        self.fc1 = nn.Linear(16, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10) # 10 outputs for 10 classes (digits 0-9)

    def forward(self, x):
      #  print("Input shape:", x.shape)
        x = F.relu(self.conv1(x))
       # print("Shape after conv1:", x.shape)
        x = F.max_pool2d(x, 2)
       # print("Shape after pool1:", x.shape)

        x = F.relu(self.conv2(x))
       # print("Shape after conv2:", x.shape)
        x = F.max_pool2d(x, 2)
      #  print("Shape after pool2:", x.shape)

        x = x.view(-1, self.num_flat_features(x))
       # print("Shape before fully connected layers:", x.shape)

        x = F.relu(self.fc1(x))
      #  print("Shape after fc1:", x.shape)
        x = F.relu(self.fc2(x))
      #  print("Shape after fc2:", x.shape)
        x = self.fc3(x)
        #print("Shape after fc3:", x.shape)
        return x

    def num_flat_features(self, x):
        size = x.size()[1:]
        num_features = 1
        for s in size:
            num_features *= s
        return num_features


#lenet5 = LeNet5()
#print(lenet5)


#input = torch.randn(1, 1, 32, 32)
#output = lenet5(input)
